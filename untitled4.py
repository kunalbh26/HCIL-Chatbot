# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AHco8hZqcdgjUHBvllgtdW1R3rrrwLEx
"""

# ============================================================================
# üß† HCIL IT Helpdesk Chatbot - Streamlit UI Version
# ============================================================================

# STEP 1: Install Required Libraries (run in terminal or Colab first)
# !pip install streamlit pandas sentence-transformers faiss-cpu openpyxl

import streamlit as st
import pandas as pd
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
import io

# STEP 2: Page Setup
st.set_page_config(page_title="HCIL IT Helpdesk Bot", layout="centered")
st.title("ü§ñ HCIL IT Helpdesk Chatbot")
st.markdown("Welcome! („Åì„Çì„Å´„Å°„ÅØ!) Ask your IT questions below.")
st.markdown("Upload your IT knowledge base Excel file to get started.")

# STEP 3: Upload Knowledge Base Excel
uploaded_file = st.file_uploader("Upload your knowledge base Excel file", type=["xlsx"])

if uploaded_file:
    try:
        kb_df = pd.read_excel(uploaded_file)
        st.success("Knowledge base loaded!")

        # STEP 4: Embedding & FAISS Setup
        model = SentenceTransformer('all-MiniLM-L6-v2')
        questions = kb_df['questions'].tolist()
        embeddings = model.encode(questions, convert_to_tensor=True)
        embeddings = np.array(embeddings).astype('float32')

        dimension = embeddings.shape[1]
        index = faiss.IndexFlatL2(dimension)
        index.add(embeddings)

        # STEP 5: Chat Interface
        st.markdown("---")
        st.subheader("üí¨ Ask your question")
        user_query = st.text_input("Type your IT query here:")

        if user_query:
            query_vec = model.encode([user_query])
            query_vec = np.array(query_vec).astype('float32')
            D, I = index.search(query_vec, 1)
            idx = I[0][0]
            response = kb_df['answers'].iloc[idx]

            st.markdown(f"**ü§ñ Bot:** {response}")

            st.markdown("---")
            feedback = st.radio("Was this helpful?", ["Yes", "No"], horizontal=True)
            if feedback == "Yes":
                st.success("Great! You can ask another query or close the chat.")
            elif feedback == "No":
                st.warning("Sorry! Please explain your issue again in a different way.")

    except Exception as e:
        st.error(f"Failed to read Excel file: {e}")
else:
    st.info("Please upload a knowledge base Excel file to get started.")

# ==========================================================================