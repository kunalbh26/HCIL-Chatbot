# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AHco8hZqcdgjUHBvllgtdW1R3rrrwLEx
"""

import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.neighbors import NearestNeighbors

# -------------------------------
# Page Configuration
# -------------------------------
st.set_page_config(page_title="HCIL IT Helpdesk Chatbot", page_icon="🤖")
st.title("🤖 HCIL IT Helpdesk Chatbot")
st.markdown("👋 **Konichiwa!** How can I help you today?")

# -------------------------------
# Upload Knowledge Base File
# -------------------------------
uploaded_file = st.file_uploader("📂 Upload your knowledge base Excel file", type=["xlsx"])

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)

    # Validate required columns
    required_columns = {'questions', 'answers', 'categories', 'tags'}
    if not required_columns.issubset(set(df.columns)):
        st.error("❌ The uploaded Excel file is missing one or more required columns: `questions`, `answers`, `categories`, `tags`.")
        st.stop()

    # Load model and create embeddings
    model = SentenceTransformer("all-MiniLM-L6-v2")
    questions = df['questions'].tolist()
    embeddings = model.encode(questions)
    embeddings = np.array(embeddings)

    # Build Nearest Neighbors index
    nn_model = NearestNeighbors(n_neighbors=1, metric='cosine')
    nn_model.fit(embeddings)

    # -------------------------------
    # Chat Section
    # -------------------------------
    st.markdown("---")
    st.subheader("💬 Chat with the Bot")

    user_input = st.text_input("🧑 You:", placeholder="Type your IT query here...")

    if user_input:
        query_embed = model.encode([user_input])
        distances, indices = nn_model.kneighbors(query_embed)

        best_idx = indices[0][0]
        response = df.iloc[best_idx]['answers']

        st.markdown(f"🤖 **Bot:** {response}")

        resolved = st.radio("🤖 Was your query resolved?", ["Yes", "No"], horizontal=True)
        if resolved == "Yes":
            st.success("✅ Great! You can type another query or click 'End Chat' below.")
        elif resolved == "No":
            st.warning("⚠️ Sorry! Please rephrase your query or ask another one.")

    # -------------------------------
    # End Chat Button
    # -------------------------------
    with st.expander("🚪 End Conversation"):
        if st.button("👋 Bye / End Chat"):
            st.markdown("---")
            st.success("🤖 Bot: Thank you for chatting!, **Mata Ne**(See you again!) 👋")
            st.stop()

else:
    st.info("⬆️ Please upload a `.xlsx` knowledge base file with columns: `questions`, `answers`, `categories`, `tags`.")